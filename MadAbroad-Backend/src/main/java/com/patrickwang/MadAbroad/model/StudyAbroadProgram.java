package com.patrickwang.MadAbroad.model;

// Imports from Jakarta Persistence API (JPA), used for Object-Relational Mapping (ORM).
import jakarta.persistence.Column; 
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

/*
* this class is a blueprint model for defining what a "Study Abroad Program" is for the database 
*/
@Entity // Marks this Java class as a database entity, mapping it to the table (structure of the table). Therefore an instance of this class maps to a row in the table. 
@Table(name = "programs") // Specifies the exact name of the database table this class maps to.
public class StudyAbroadProgram {

    @Id // Designates this field as the primary key for the database table. A primary key is used as the fastest way to find data. 
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the ID property to be auto-generated by the database itself.
    private Long id;

    @Column(nullable = false) // Maps this field to a column that cannot be null in the database.
    private String programUniversityName;

    @Column(nullable = false) 
    private String country;
    
    @Column(nullable = false) 
    private String city;

    @Column(nullable = false) 
    private String terms;

    @Column(nullable = false) 
    private String areasOfFocus;

    @Column(nullable = false) 
    private String language;

    @Column(nullable = false) 
    private String link;


    /*
    * This constructor is used when data is flowing from the database to the java application. 
    * 
    * Its a no-argument constructor that is required by JPA for creating object instances. JPA will start with an object with all private 
    * instance variables (columns) set as null, then populate them with data using the setters provided. 
    */
    public StudyAbroadProgram() {
    }

    /*
    * This constructor is used when data is flowing from the java application to the database. (for ongoing data creation, initial database seeding, populating data for tests, etc.)
    *
    * Its a standard constructor that is not required by JPA but helpful for individually creating instances of this class. In order for it
    * to be savd into the database using this constructor, you must: 
    *
    * 1. StudyAbroadProgram demoProgram = new StudyAbroadProgram(...)
    * 2. programRepository.save(demoProgram)
    */
    public StudyAbroadProgram(String programUniversityName, String country, String city, String terms, String areasOfFocus, String language, String link) {
        this.programUniversityName = programUniversityName;
        this.country = country;
        this.city = city;
        this.terms = terms;
        this.areasOfFocus = areasOfFocus;
        this.language = language;
        this.link = link;
    }

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getProgramUniversityName() { return programUniversityName; }
    public void setProgramUniversityName(String programUniversityName) { this.programUniversityName = programUniversityName; }
    public String getCountry() { return country; }
    public void setCountry(String country) { this.country = country; }
    public String getCity() { return city; }
    public void setCity(String city) { this.city = city; }
    public String getTerms(){ return terms; }
    public void setTerms(String terms) { this.terms = terms; }
    public String getAreasOfFocus(){ return areasOfFocus; }
    public void setAreasOfFocus( String areasOfFocus ){ this.areasOfFocus = areasOfFocus; }
    public String getLanguage(){ return language; }
    public void setLanguage( String language ){ this.language = language; }
    public String getLink() { return link; }
    public void setLink(String link) { this.link = link; }
}